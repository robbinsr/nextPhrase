predicting the next word
========================================================
author: Russ Robbins
date: August 23, 2015

[link to app...right click and open in new tab](https://robbinsr.shinyapps.io/predicting)

Prediction Algorithm
========================================================

1.  Count and store input words. Search n-grams dataframe that has number of columns == number of input words + 1. 
2.  Match each word against associated ngram positions numbered one through number of ngram words - 1.
3.  Return result which is the same words entered plus an additional word (the last word in the found ngram(s))
4.  If ngram(s) not found, search using the rightmost words against next smallest ngram. Recurse until ngram(s) found.
5.  Replace leftmost word positions of phrase not in ngram results with input words. Return result.
6.  If no ngrams anywhere, append "is" to input words, return result.
7.  Results returned ordered by frequency, highest first.

Prediction App Description
========================================================

- Input has text box and blogs, news, or tweets buttons.
- Ouput panel has 2 tabs: single or multiple predictions.
- Data loads on 1st request to server (about 30 secs).
- The text box does not require a submit by the user.
- Multiple predictions page(s) can be searched. 
- Multiple predictions page(s) can be browsed.

Instructions for App
========================================================

1.  Wait for app to fully load. You will know the app is fully loaded when there is a result in the 'one prediction' tab. 
2.  Choose your data source by selecting the affiliated radio button.
3.  Type one to eight words. You do not need to hit enter but you can if desired.
4.  Browse or search results.
5.  Repeat to your heart's content.
6.  Start each new prediction from a blank text box.

Tools used or tried
========================================================

1. R / Shiny / R Markdown
2. [Python](https://www.python.org/) / [PyCharm](https://www.jetbrains.com/pycharm/) 
3. [l-gram-win-0.02](https://code.google.com/p/lgram/)
4. [stackoverflow](http://stackoverflow.com/)
5. [Speech and Language Processing, Chapters 1 - 6](http://www.amazon.com/Speech-Language-Processing-2nd-Edition/dp/0131873210)
6. [Pluralsight.com python courses](http://www.pluralsight.com/)
7. [Regex101 interpreter](http://regex101.com)
8. [Python Regex/NLP Modules](https://pypi.python.org/pypi) 
9. [R Regex/NLP Packages](http://cran.us.r-project.org/)
10. [My Code...right click and open new tab](https://github.com/robbinsr/predicting)