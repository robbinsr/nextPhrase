import re


def expand_contractions(data_file_in, data_file_out):
    """
   Takes in file that has contractions and writes file with those
   contractions as words without an apostrophe.
   :param data_file_in: name of input file, string
   :param data_file_out: name of output file, string
   :return: None, function writes a file.
   """
    contractions = {
        "ain't": "aint",
        "aren't": "are not",
        "can't": "cannot",
        "can't've": "cannot have",
        "'cause": "because",
        "could've": "could have",
        "couldn't": "could not",
        "couldn't've": "could not have",
        "didn't": "did not",
        "doesn't": "does not",
        "don't": "do not",
        "hadn't": "had not",
        "hadn't've": "had not have",
        "hasn't": "has not",
        "haven't": "have not",
        "he'd": "he would",
        "he'd've": "he would have",
        "he'll": "he will",
        "he'll've": "he will have",
        "he's": "he is",
        "how'd": "how did",
        "how'd'y": "how do you",
        "how'll": "how will",
        "how's": "how is",
        "i'd": "I would",
        "i'd've": "I would have",
        "i'll": "I will",
        "i'll've": "I will have",
        "i'm": "I am",
        "i've": "I have",
        "isn't": "is not",
        "it'd": "it had",
        "it'd've": "it would have",
        "it'll": "it will",
        "it'll've": "it will have",
        "it's": "it is",
        "let's": "let us",
        "ma'am": "madam",
        "mayn't": "may not",
        "might've": "might have",
        "mightn't": "might not",
        "mightn't've": "might not have",
        "must've": "must have",
        "mustn't": "must not",
        "mustn't've": "must not have",
        "needn't": "need not",
        "needn't've": "need not have",
        "o'clock": "of the clock",
        "oughtn't": "ought not",
        "oughtn't've": "ought not have",
        "shan't": "shall not",
        "sha'n't": "shall not",
        "shan't've": "shall not have",
        "she'd": "she would",
        "she'd've": "she would have",
        "she'll": "she will",
        "she'll've": "she will have",
        "she's": "she has",
        "should've": "should have",
        "shouldn't": "should not",
        "shouldn't've": "should not have",
        "so've": "so have",
        "so's": "so as",
        "that'd": "that would",
        "that'd've": "that would have",
        "that's": "that has",
        "there'd": "there would",
        "there'd've": "there would have",
        "there's": "there is",
        "they'd": "they would",
        "they'd've": "they would have",
        "they'll": "they will",
        "they'll've": "they will have",
        "they're": "they are",
        "they've": "they have",
        "to've": "to have",
        "wasn't": "was not",
        "we'd": "we had",
        "we'd've": "we would have",
        "we'll": "we will",
        "we'll've": "we will have",
        "we're": "we are",
        "we've": "we have",
        "weren't": "were not",
        "what'll": "what will",
        "what'll've": "what will have",
        "what're": "what are",
        "what's": "what has",
        "what've": "what have",
        "when's": "when is",
        "when've": "when have",
        "where'd": "where did",
        "where's": "where is",
        "where've": "where have",
        "who'll": "who will",
        "who'll've": "who will have",
        "why's": "why is",
        "why've": "why have",
        "will've": "will have",
        "won't": "will not",
        "won't've": "will not have",
        "would've": "would have",
        "wouldn't": "would not",
        "wouldn't've": "would not have",
        "y'all": "you all",
        "y'all'd": "you all would",
        "y'all'd've": "you all would have",
        "y'all're": "you all are",
        "y'all've": "you all have",
        "you'd": "you had",
        "you'd've": "you would have",
        "you'll": "you will",
        "you'll've": "you will have",
        "you're": "you are",
        "you've": "you have",
        "Ain't": "aint",
        "Aren't": "are not",
        "Can't": "cannot",
        "Can't've": "cannot have",
        "'Cause": "because",
        "Could've": "could have",
        "Couldn't": "could not",
        "Couldn't've": "could not have",
        "Didn't": "did not",
        "Doesn't": "does not",
        "Don't": "do not",
        "Hadn't": "had not",
        "Hadn't've": "had not have",
        "Hasn't": "has not",
        "Haven't": "have not",
        "He'd": "he would",
        "He'd've": "he would have",
        "He'll": "he will",
        "He'll've": "he will have",
        "He's": "he is",
        "How'd": "how did",
        "How'd'y": "how do you",
        "How'll": "how will",
        "How's": "how is",
        "I'd": "I would",
        "I'd've": "I would have",
        "I'll": "I will",
        "I'll've": "I will have",
        "I'm": "I am",
        "I've": "I have",
        "Isn't": "is not",
        "It'd": "it had",
        "It'd've": "it would have",
        "It'll": "it will",
        "It'll've": "it will have",
        "It's": "it is",
        "Let's": "let us",
        "Ma'am": "madam",
        "Mayn't": "may not",
        "Might've": "might have",
        "Mightn't": "might not",
        "Mightn't've": "might not have",
        "Must've": "must have",
        "Mustn't": "must not",
        "Mustn't've": "must not have",
        "Needn't": "need not",
        "Needn't've": "need not have",
        "O'clock": "of the clock",
        "Oughtn't": "ought not",
        "Oughtn't've": "ought not have",
        "Shan't": "shall not",
        "Sha'n't": "shall not",
        "Shan't've": "shall not have",
        "She'd": "she would",
        "She'd've": "she would have",
        "She'll": "she will",
        "She'll've": "she will have",
        "She's": "she has",
        "Should've": "should have",
        "Shouldn't": "should not",
        "Shouldn't've": "should not have",
        "So've": "so have",
        "So's": "so as",
        "That'd": "that would",
        "That'd've": "that would have",
        "That's": "that has",
        "There'd": "there would",
        "There'd've": "there would have",
        "There's": "there is",
        "They'd": "they would",
        "They'd've": "they would have",
        "They'll": "they will",
        "They'll've": "they will have",
        "They're": "they are",
        "They've": "they have",
        "To've": "to have",
        "Wasn't": "was not",
        "We'd": "we had",
        "We'd've": "we would have",
        "We'll": "we will",
        "We'll've": "we will have",
        "We're": "we are",
        "We've": "we have",
        "Weren't": "were not",
        "What'll": "what will",
        "What'll've": "what will have",
        "What're": "what are",
        "What's": "what has",
        "What've": "what have",
        "When's": "when is",
        "When've": "when have",
        "Where'd": "where did",
        "Where's": "where is",
        "Where've": "where have",
        "Who'll": "who will",
        "Who'll've": "who will have",
        "Why's": "why is",
        "Why've": "why have",
        "Will've": "will have",
        "Won't": "will not",
        "Won't've": "will not have",
        "Would've": "would have",
        "Wouldn't": "would not",
        "Wouldn't've": "would not have",
        "Y'all": "you all",
        "Y'all'd": "you all would",
        "Y'all'd've": "you all would have",
        "Y'all're": "you all are",
        "Y'all've": "you all have",
        "You'd": "you had",
        "You'd've": "you would have",
        "You'll": "you will",
        "You'll've": "you will have",
        "You're": "you are",
        "You've": "you have"
        }

    contractions_re = re.compile('(%s)' % '|'.join(contractions.keys()))

    def expand(s, contractions_dict=contractions):
        def replace(match):
            return contractions_dict[match.group(0)]

        return contractions_re.sub(replace, s)

    with open(data_file_in, mode='r', encoding='utf8') as f_in:
        with open(data_file_out, mode='w', encoding='utf8') as f_out:
            for line in f_in:
                line = expand(line)
                for item in line:
                    f_out.writelines("%s" % item)

        return None
