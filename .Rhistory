x<-1:4
p<-x/sum(x)
temp<-rbind(x,p)
View(temp)
rownames(temp)<-c("X","Prob")
rownames(temp)<-c("X","Prob")
temp
clear
install.packages("galton")
install.packages("Galton")
install.packages("UsingR")
data(galton)
library(UsingR); data(galton);
par(mfrow-c(1,2))
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
pwd
pwd()
wd
wd()
setwd("~/")
cd ..
setwd("C:\rm")
setwd("C:\")
setwd("C:\");
setwd("C:")
getwd()
cd ..
setwd("C:/")
getwd()
setwd("C:/rm")
getwd()
setwd("~/")
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
View(temp)
View(temp)
rownames(temp) <- c("X", "Prob")
View(temp)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mu <- sum(x*w)
a<-c(1,2,3,4)
b<-c(.1,.2,.3,.4)
mean <-sum(a*b)
mu <- sum(x*w)
sum(w*(x-mu)^2)
sum(w*((x-mu)^2))
mu1<-0.1471
mu2<-0.0025
mu3<-1.077
mu4<-0.300
a1<-sum(w*((x-mu1)^2))
a2<-sum(w*((x-mu2)^2))
a3<-sum(w*((x-mu3)^2))
a4<-sum(w*((x-mu4)^2))
mu1<-0.1471
mu2<-0.300
mu3<-1.077
mu4<-0.0025
a1<-sum(w*((x-mu1)^2))
a2<-sum(w*((x-mu2)^2))
a3<-sum(w*((x-mu3)^2))
a4<-sum(w*((x-mu4)^2))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
coef(lm(y ~ x))[1]
corXY<-cor(y,x)
corXY<-cor(y,x)
sdX <- sd(x)
sdY <- sd(y)
beta1<-(corXY*(sdY/sdX))
Y <- beta1*x
plot(x,Y)
plot(x,y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
coef(lm(y ~ x))[-1]
Beta1<-coef(lm(y ~ x))[-1]
Y<-Beta1*x
plot(x,Y)
help(plot)
Y<-Beta1*x
par(xaxp<-c(-3,+3,30),yaxp<-c(-3,3,30))
plot(x,Y)
plot(x,Y,xlim=c(-3, 3), ylim=c(-3, 3))
plot(x,Y,xlim=c(-1, 1), ylim=c(-1, 1))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x,y,xlim=c(-1, 1), ylim=c(-1, 1))
plot(x,y,xlim=c(-2, 2), ylim=c(-2, 2))
abline(0,0)
abline(,0)
abline(h=0)
abline(v=0)
coef(lm(y ~ x))[-1]
Y<-Beta1*x
Beta1<-coef(lm(y ~ x))[-1]
Y<-Beta1*x
plot(x,Y,xlim=c(-2,2),ylim=c(-2,2),col=red)
plot(x,Y,xlim=c(-2,2),ylim=c(-2,2),col="red")
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x,y,xlim=c(-2, 2), ylim=c(-2, 2))
abline(h=0)
abline(v=0)
Beta1<-coef(lm(y ~ x))[-1]
Y<-Beta1*x
plot(x,Y,xlim=c(-2,2),ylim=c(-2,2),col="red")
plot(x,y,xlim=c(-2, 2), ylim=c(-2, 2))
abline(h=0)
abline(v=0)
Beta1<-coef(lm(y ~ x))[-1]
Y<-Beta1*x
plot(x,Y,xlim=c(-2,2),ylim=c(-2,2),col="red")
plot(x,y,xlim=c(-2, 2), ylim=c(-2, 2))
abline(h=0)
abline(v=0)
Beta1<-coef(lm(y ~ x))[-1]
Y<-Beta1*x
points(x,Y,xlim=c(-2,2),ylim=c(-2,2),col="red")
abline(Beta1)
abline(0, Beta1, col="blue")
data(mtcars)
help(lm)
view(mtcars)
mtcars
model<-lm(mpg~wt)
View(mtcars)
model<-lm(mtcars$mpg~mtcars$wt)
lm
model
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x-bar<-mean(x)
xbar<-mean(x)
help(sd)
xsd<-sd(x)
x[1]
(x[1]-xbar)/xsd
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
model<-lm(y~x)
model
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42
)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
xbar<-mean(x)
x-xbar
(x-xbar)^2
sum(((x-xbar)^2))
xbar1<-0.573
xbar2<-0.8
xbar3<-0.36
xbar4<-0.44
a1<-sum(((x-xbar1)^2))
a2<-sum(((x-xbar2)^2))
a3<-sum(((x-xbar3)^2))
a4<-sum(((x-xbar4)^2))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(I(y - mean(y))~ I(x - mean(x)) - 1)
lm(y~x - 1)
lm(y~x)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
require(devtools)
install_github('rCharts', 'ramnathv')
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
airquality
View(airquality)
View(airquality)
head(airquality)
dTable(airquality, sPaginationType = "full_numbers")
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
require(devtools)
install_github(ramnathv/rCharts)
install_github('ramnathv/rCharts')
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
data(airquality)
load(rCharts)
load('rCharts')
install.packages(c("dplyr", "highr", "httpuv", "jsonlite", "knitr", "minqa", "R6", "rmarkdown"))
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "MASS", "mgcv", "nlme"), lib="C:/R-3.1.1/library")
load(rCharts)
require(shiny)
require(data.table)
dTable(airquality, sPaginationType = "full_numbers")
install(data.table)
install.packages("data.table")
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
install(shiny)
install.packages("shiny")
install.pakages(data.table)
install.packages(data.table)
install.packages('data.table')
dTable(airquality, sPaginationType = "full_numbers")
install.packages("data.table_1.8.8")
install.packages("data.table")
load(data.table)
load('data.table')
load(rCharts)
load('rCharts')
require(shiny)
require(data.table)
dTable(airquality, sPaginationType = "full_numbers")
x<-dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
install.packages("C:/Users/Russ/Downloads/ramnathv-rCharts-2c368c8.zip", repos = NULL)
require(rCharts)
install.packages(rCharts)
install.packages(rCharts)
install.packages(ramnathv-rCharts-2c368c8)
require(rCharts)
require(devtools)
install.packages("Rtools")
install.packages("RTools")
?stitch
RGui
q()
sd(c(5,8,12))
which.min(c(4,1,6))
8 * 6
2^16
2^
8 * 6
8 * 10
sqrt(2)
abs(-65)
?sqrt
SquareRoot2 = sqrt(2)
SquareRoot2
HoursYear <- 365*24
HoursYear
ls
ls()
c(2,3,5,8,13)
Country = c('Brazil','China','India', 'Switzerland', 'USA')
LifeExpectancy = c(74, 76, 65, 83, 79)
Country
LifeExpectancy
seq(0, 100, 2)
CountryData = data.frame(Country,LifeExpectancy)
View(CountryData)
CountryData
CountryData$Population = c(199000, 1390000, 1240000, 7997, 318000)
Country = c('Australia','Greece')
LifeExpectancy = c(82,81)
Population = c(23050, 11125)
NewCountryData = data.frame(Country, LifeExpectancy, Population)
NewCountryDAta
NewCountryData
AllCountryData = rbind(CountryData, NewCountryData)
AllCountryData
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
load("C:/coursework/dsc/txt/dsc.r.objects.RData")
load("C:/coursework/dsc/dsc0325152016.RData")
blogslines.KEEP.ll.tokens[1:100]
testWekaNGrammer <- blogslines.KEEP.ll.tokens[1:100]
library(RWeka)
bigramTest <- NGramTokenizer(testWekaNGrammer, Weka_control(min = 2, max = 2))
bigramTest
testWekaNGrammer <- blogslines.KEEP.ll.tokens[1:10000]
bigramTest <- NGramTokenizer(testWekaNGrammer, Weka_control(min = 2, max = 2))
bigramTest
bigramTest <- NGramTokenizer(testWekaNGrammer, Weka_control(min = 2, max = 2))
bigramTest
tail(bigramTest)
testWekaNGrammer <- blogslines.KEEP.ll.tokens[1:500000]
bigramTest <- NGramTokenizer(testWekaNGrammer, Weka_control(min = 2, max = 2))
testWekaNGrammer <- blogslines.KEEP.ll.tokens[1:200000]
bigramTest <- NGramTokenizer(testWekaNGrammer, Weka_control(min = 2, max = 2))
testWekaNGrammer <- blogslines.KEEP.ll.tokens[1:100000]
bigramTest <- NGramTokenizer(testWekaNGrammer, Weka_control(min = 2, max = 2))
library(RWeka)
testWekaNGrammer <- blogslines.KEEP.ll.tokens[1:100000]
bigramTest <- NGramTokenizer(testWekaNGrammer, Weka_control(min = 2, max = 2))
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
library(tm)
install.packages("R.utils", repos="http://cran.us.r-project.org")
install.packages("RWeka", repos="http://cran.us.r-project.org")
install.packages("stylo",repos="http://cran.us.r-project.org")
testTM <- testWekaNGrammer
test.tmVC <- VCorpus(VectorSource(testTM))
library(tm)
test.tmVC <- VCorpus(VectorSource(testTM))
test.tmVC[1]
test.tmVC[100]
test.tmVC[1:100]
testTM[1]
test.tmTDM <- TermDocumentMatrix(test.tmVC)
test.tmTDM[1]
test.tmTDM[2]
test.tmTDM[3]
test.tmTDM
View(tmTDM)
View(test.tmTDM)
inspect(test.tmTDM[200:205, 1:51])
test.tm.DF <- as.data.frame(test.tmTDM)
test.tm.DF <- data.frame(test.tmTDM)
install.packages("RJSONIO")
?rjsonio
??rjsonio
help RJSONIO
help(RJSONIO)
??RJSONIO
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
install.packages("shiny")
devtools::install_github('rstudio/shinyapps')
install_github( repo = "shinyapps", username="rstudio" )
install_github( repo = "shinyapps", username="rstudio" )
devtools::install_github( repo = "shinyapps", username="rstudio" )
install.packages("C:/Users/Russ/Downloads/shinyapps-master.zip", repos = NULL)
library(shinyapps)
library(DT-master)
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
shiny::runApp('C:/learnShiny/App-1')
setwd("C:/nextPhrase")
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("C:/learnShiny/presentation")
setwd("C:/learnShiny/presentation")
setwd("C:/nextPhrase")
shiny::runApp()
setwd("C:/learnShiny/presentation")
setwd("C:/nextPhrase")
shiny::runApp()
